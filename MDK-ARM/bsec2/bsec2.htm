<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [bsec2\bsec2.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image bsec2\bsec2.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Wed Nov 20 17:38:10 2024
<BR><P>
<H3>Maximum Stack Usage =       7304 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; bsec_iot_init &rArr; bsec_set_configuration_m &rArr; bsec_codegen_set_configuration &rArr; bsec_ChannelHub_configureChannel &rArr; bsec_GasEstimator_configure &rArr; bsec_r_Entity_parseAndDeserialize
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[10]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">ADC1_IRQHandler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[10]">ADC1_IRQHandler</a> from startup_stm32l010xb.o(.text) referenced from startup_stm32l010xb.o(RESET)
 <LI><a href="#[d]">DMA1_Channel1_IRQHandler</a> from startup_stm32l010xb.o(.text) referenced from startup_stm32l010xb.o(RESET)
 <LI><a href="#[e]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32l010xb.o(.text) referenced from startup_stm32l010xb.o(RESET)
 <LI><a href="#[f]">DMA1_Channel4_5_6_7_IRQHandler</a> from startup_stm32l010xb.o(.text) referenced from startup_stm32l010xb.o(RESET)
 <LI><a href="#[a]">EXTI0_1_IRQHandler</a> from startup_stm32l010xb.o(.text) referenced from startup_stm32l010xb.o(RESET)
 <LI><a href="#[b]">EXTI2_3_IRQHandler</a> from startup_stm32l010xb.o(.text) referenced from startup_stm32l010xb.o(RESET)
 <LI><a href="#[c]">EXTI4_15_IRQHandler</a> from startup_stm32l010xb.o(.text) referenced from startup_stm32l010xb.o(RESET)
 <LI><a href="#[8]">FLASH_IRQHandler</a> from startup_stm32l010xb.o(.text) referenced from startup_stm32l010xb.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32l0xx_it.o(i.HardFault_Handler) referenced from startup_stm32l010xb.o(RESET)
 <LI><a href="#[15]">I2C1_IRQHandler</a> from startup_stm32l010xb.o(.text) referenced from startup_stm32l010xb.o(RESET)
 <LI><a href="#[11]">LPTIM1_IRQHandler</a> from startup_stm32l010xb.o(.text) referenced from startup_stm32l010xb.o(RESET)
 <LI><a href="#[18]">LPUART1_IRQHandler</a> from startup_stm32l010xb.o(.text) referenced from startup_stm32l010xb.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32l0xx_it.o(i.NMI_Handler) referenced from startup_stm32l010xb.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from stm32l0xx_it.o(i.PendSV_Handler) referenced from startup_stm32l010xb.o(RESET)
 <LI><a href="#[9]">RCC_IRQHandler</a> from startup_stm32l010xb.o(.text) referenced from startup_stm32l010xb.o(RESET)
 <LI><a href="#[7]">RTC_IRQHandler</a> from startup_stm32l010xb.o(.text) referenced from startup_stm32l010xb.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32l010xb.o(.text) referenced from startup_stm32l010xb.o(RESET)
 <LI><a href="#[16]">SPI1_IRQHandler</a> from startup_stm32l010xb.o(.text) referenced from startup_stm32l010xb.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from stm32l0xx_it.o(i.SVC_Handler) referenced from startup_stm32l010xb.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from stm32l0xx_it.o(i.SysTick_Handler) referenced from startup_stm32l010xb.o(RESET)
 <LI><a href="#[1a]">SystemInit</a> from system_stm32l0xx.o(i.SystemInit) referenced from startup_stm32l010xb.o(.text)
 <LI><a href="#[13]">TIM21_IRQHandler</a> from startup_stm32l010xb.o(.text) referenced from startup_stm32l010xb.o(RESET)
 <LI><a href="#[14]">TIM22_IRQHandler</a> from startup_stm32l010xb.o(.text) referenced from startup_stm32l010xb.o(RESET)
 <LI><a href="#[12]">TIM2_IRQHandler</a> from startup_stm32l010xb.o(.text) referenced from startup_stm32l010xb.o(RESET)
 <LI><a href="#[17]">USART2_IRQHandler</a> from startup_stm32l010xb.o(.text) referenced from startup_stm32l010xb.o(RESET)
 <LI><a href="#[6]">WWDG_IRQHandler</a> from startup_stm32l010xb.o(.text) referenced from startup_stm32l010xb.o(RESET)
 <LI><a href="#[1b]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32l010xb.o(.text)
 <LI><a href="#[1d]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0vsprintf)
 <LI><a href="#[1f]">bus_read</a> from main.o(i.bus_read) referenced from main.o(i.main)
 <LI><a href="#[1e]">bus_write</a> from main.o(i.bus_write) referenced from main.o(i.main)
 <LI><a href="#[21]">config_load</a> from main.o(i.config_load) referenced from main.o(i.main)
 <LI><a href="#[1c]">fputc</a> from fputc.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[25]">get_timestamp_us</a> from main.o(i.get_timestamp_us) referenced from main.o(i.main)
 <LI><a href="#[19]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[24]">output_ready</a> from main.o(i.output_ready) referenced from main.o(i.main)
 <LI><a href="#[20]">sleep_n</a> from main.o(i.sleep_n) referenced from main.o(i.main)
 <LI><a href="#[22]">state_load</a> from main.o(i.state_load) referenced from main.o(i.main)
 <LI><a href="#[23]">state_save</a> from main.o(i.state_save) referenced from main.o(i.main)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1b]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010xb.o(.text)
</UL>
<P><STRONG><a name="[172]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[26]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[50]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[173]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[174]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[175]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[28]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_fini_ (Weak Reference)
</UL>

<P><STRONG><a name="[176]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[177]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, startup_stm32l010xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010xb.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l010xb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010xb.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l010xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010xb.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l010xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010xb.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA1_Channel4_5_6_7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l010xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010xb.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l010xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010xb.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l010xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010xb.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l010xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010xb.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l010xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010xb.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l010xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010xb.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l010xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010xb.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l010xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010xb.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l010xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010xb.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l010xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010xb.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l010xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010xb.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIM21_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l010xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010xb.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIM22_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l010xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010xb.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l010xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010xb.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l010xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010xb.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l010xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010xb.o(RESET)
</UL>
<P><STRONG><a name="[178]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_n
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_updateInterfaceDependency
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_doStep
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_isChannelReady
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_recalculateDownsampling
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rem_uint16_t
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_rem
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rem_uint16_t
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_do_steps
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_conf
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2a]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_sensor_control
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[2d]"></a>__aeabi_ldivmod</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBme68xConfigParallel
</UL>

<P><STRONG><a name="[2e]"></a>__aeabi_lmul</STRONG> (Thumb, 122 bytes, Stack size 64 bytes, llmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_lmul &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_iot_loop
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_sensor_control
</UL>

<P><STRONG><a name="[179]"></a>_ll_mul</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, llmul.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_load
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_q_Entity_parseAndDeserialize
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_l_Entity_parseAndDeserialize
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_k_Entity_parseAndDeserialize
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_j_Entity_parseAndDeserialize
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_i_Entity_parseAndDeserialize
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_setHyperConfiguration
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_validateSerialization
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_frameSerializedData
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_sensor_control
</UL>

<P><STRONG><a name="[9c]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_iot_init
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_preprocessInput
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_estimateGas
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_applyTransferFunction
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_u_Entity_parseAndDeserialize
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_t_Entity_parseAndDeserialize
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_s_Entity_parseAndDeserialize
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_r_Entity_parseAndDeserialize
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_o_Entity_parseAndDeserialize
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_i_Entity_serializeAndAdd
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_h_Entity_parseAndDeserialize
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_setHyperConfiguration
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_update_subscription
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_gas_resistance_low
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_get_data
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getData
</UL>

<P><STRONG><a name="[17a]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[30]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[17b]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[17c]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2f]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_applyUpdateSubscription
</UL>

<P><STRONG><a name="[5d]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_iot_loop
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_iot_init
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_set_regs
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_field_data
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_all_field_data
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_get_data
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_bsec_process_data
</UL>

<P><STRONG><a name="[17d]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[31]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[168]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print
</UL>

<P><STRONG><a name="[32]"></a>__aeabi_fadd</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ExpSmoothing_setCoeffFromBandwidth
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_vocFeatureTempHumComp
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_filterRobustMaxMin
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_determineAccuracyLevel
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_c_GasEstimator_matMultVec
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_GasEstimator_softmaxApply
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_GasEstimator_applyTransferFunction
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_softmaxApply
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_estimateGas
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_denormalization
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_applyTransferFunction
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorStatusTracker_doStep
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_doStep
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_doStep
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_updateInterfaceDependency
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_doStep
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityPreProcessor_doStep
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_sensor_control
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_temperature
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_res_heat
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_pressure
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_humidity
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_gas_resistance_low
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roundf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10f
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floorf
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_convertHumidity
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
</UL>

<P><STRONG><a name="[35]"></a>__aeabi_fsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ExpSmoothing_setCoeffFromBandwidth
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_vocFeatureTempHumComp
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_getMinimumFilterDistance
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_filterRobustMaxMin
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_determineAccuracyLevel
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_GasEstimator_softmaxApply
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_GasEstimator_applyTransferFunction
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_softmaxApply
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_preprocessInput
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_denormalization
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_applyTransferFunction
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_doStep
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_doStep
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_updateInterfaceDependency
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_doStep
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityPreProcessor_doStep
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_doStep
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_temperature
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_res_heat
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_pressure
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_humidity
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_gas_resistance_low
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roundf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10f
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_convertHumidity
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[36]"></a>__aeabi_frsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_vocFeatureTempHumComp
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_isBaselineAllowedAdapt
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_filterRobustMaxMin
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_denormalization
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_pressure
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[8b]"></a>__aeabi_fmul</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ExpSmoothing_setCoeffFromBandwidth
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_vocFeatureTempHumComp
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_filterRobustMaxMin
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_determineAccuracyLevel
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_c_GasEstimator_matMultVec
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_GasEstimator_applyTransferFunction
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_estimateGas
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_denormalization
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_applyTransferFunction
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_doStep
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_doStep
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_updateInterfaceDependency
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_doStep
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityPreProcessor_doStep
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_doStep
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_sensor_control
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_temperature
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_res_heat
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_pressure
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_humidity
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_gas_resistance_low
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_gas_resistance_high
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10f
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_convertHumidity
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[37]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_vocFeatureTempHumComp
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_isBaselineAllowedAdapt
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_getMinimumFilterDistance
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_filterRobustMaxMin
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_GasEstimator_softmaxApply
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_GasEstimator_applyTransferFunction
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_softmaxApply
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_preprocessInput
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_denormalization
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_applyTransferFunction
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorStatusTracker_doStep
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_doStep
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_updateInterfaceDependency
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_doStep
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_updateInterfaceDependency
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityPreProcessor_updateInterfaceDependency
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_updateInterfaceDependency
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_update_subscription
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_sensor_control
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_temperature
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_res_heat
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_pressure
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_humidity
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_gas_resistance_low
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_gas_resistance_high
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10f
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_convertHumidity
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_divzero
</UL>

<P><STRONG><a name="[85]"></a>__ARM_scalbnf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fscalb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ExpSmoothing_setCoeffFromBandwidth
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_getMinimumFilterDistance
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_updateInterfaceDependency
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityPreProcessor_updateInterfaceDependency
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_updateInterfaceDependency
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_temperature
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_res_heat
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_pressure
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_humidity
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10f
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>

<P><STRONG><a name="[17e]"></a>scalbnf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fscalb.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>__aeabi_dadd</STRONG> (Thumb, 330 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_rt_remd
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_rt_roundd
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_sensor_control
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trunc
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>

<P><STRONG><a name="[3c]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_rt_roundd
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trunc
</UL>

<P><STRONG><a name="[3d]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_rt_remd
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trunc
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmod
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>

<P><STRONG><a name="[3e]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_doStep
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_update_subscription
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[3f]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_ready
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_rt_remd
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_doStep
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
</UL>

<P><STRONG><a name="[15b]"></a>__ARM_scalbn</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_rt_remd
</UL>

<P><STRONG><a name="[17f]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>__aeabi_i2f</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_GasHumidityBaselineTracker
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_temperature
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_res_heat
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_pressure
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_humidity
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_gas_resistance_low
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_gas_resistance_high
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10f
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[41]"></a>__aeabi_ui2f</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_isBaselineAllowedAdapt
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_filterRobustMaxMin
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_updateInterfaceDependency
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityPreProcessor_updateInterfaceDependency
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_updateInterfaceDependency
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_setOutput
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_do
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_update_subscription
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_temperature
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_res_heat
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_pressure
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_humidity
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_gas_resistance_low
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_gas_resistance_high
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processData
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[42]"></a>__aeabi_l2f</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ffltl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_l2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorStatusTracker_doStep
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_sensor_control
</UL>

<P><STRONG><a name="[43]"></a>__aeabi_ui2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_rem
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_update_subscription
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_sensor_control
</UL>

<P><STRONG><a name="[44]"></a>__aeabi_l2d</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, dfltl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __aeabi_l2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_ready
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_doStep
</UL>

<P><STRONG><a name="[11a]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_ready
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_isBaselineAllowedAdapt
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_pressure
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>

<P><STRONG><a name="[92]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_updateInterfaceDependency
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_doStep
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_ChannelHub_setOutput
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_setOutput
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_update_subscription
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_sensor_control
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_do_steps
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_res_heat
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_bsec_process_data
</UL>

<P><STRONG><a name="[45]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_d2iz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_GasEstimator_applyTransferFunction
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_applyTransferFunction
</UL>

<P><STRONG><a name="[46]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2uiz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_rem
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_update_subscription
</UL>

<P><STRONG><a name="[47]"></a>__aeabi_d2lz</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, dfixl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_d2lz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_sensor_control
</UL>

<P><STRONG><a name="[16f]"></a>__aeabi_f2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_ready
</UL>

<P><STRONG><a name="[158]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_rt_remd
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_rem
</UL>

<P><STRONG><a name="[15d]"></a>__aeabi_cdcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_rt_remd
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_rt_roundd
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trunc
</UL>

<P><STRONG><a name="[8d]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_rt_roundd
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trunc
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>

<P><STRONG><a name="[48]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_ready
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_doStep
</UL>

<P><STRONG><a name="[b7]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_denormalization
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_do
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_isGasIndexNew
</UL>

<P><STRONG><a name="[101]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_filterRobustMaxMin
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_determineAccuracyLevel
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_GasEstimator_softmaxApply
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_softmaxApply
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_denormalization
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorStatusTracker_doStep
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_doStep
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_doStep
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_update_subscription
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_do_steps
</UL>

<P><STRONG><a name="[102]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_filterRobustMaxMin
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_denormalization
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_doStep
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_do_steps
</UL>

<P><STRONG><a name="[2c]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[180]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[2b]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[181]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[39]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[182]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[34]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsqrt
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix_r
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
</UL>

<P><STRONG><a name="[33]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2f
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>

<P><STRONG><a name="[49]"></a>_fsqrt</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, fsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _fsqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>

<P><STRONG><a name="[4a]"></a>_frnd</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, frnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _frnd
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roundf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>

<P><STRONG><a name="[3b]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[3a]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drem
</UL>

<P><STRONG><a name="[4c]"></a>_drnd</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, drnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _drnd &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trunc
</UL>

<P><STRONG><a name="[4d]"></a>_drem</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, drem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _drem &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmod
</UL>

<P><STRONG><a name="[4e]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[4f]"></a>_ffix_r</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ffixir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ffix_r
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
</UL>

<P><STRONG><a name="[16b]"></a>__ARM_fcmp4</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fcmp4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fminf
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmaxf
</UL>

<P><STRONG><a name="[184]"></a>_fcmp4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fcmp4.o(.text), UNUSED)

<P><STRONG><a name="[185]"></a>__fp_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fpstat.o(.text), UNUSED)

<P><STRONG><a name="[170]"></a>__ieee_status</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fpstat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
</UL>

<P><STRONG><a name="[27]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[186]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>Error_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[187]"></a>__I$use$semihosting$fputc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusesemip.o(.text), UNUSED)

<P><STRONG><a name="[188]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, semi.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32l0xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_n
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5e]"></a>HAL_GPIO_Init</STRONG> (Thumb, 412 bytes, Stack size 24 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>

<P><STRONG><a name="[52]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l0xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timestamp_us
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[76]"></a>HAL_I2CEx_ConfigAnalogFilter</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32l0xx_hal_i2c_ex.o(i.HAL_I2CEx_ConfigAnalogFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_I2CEx_ConfigAnalogFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[77]"></a>HAL_I2CEx_ConfigDigitalFilter</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32l0xx_hal_i2c_ex.o(i.HAL_I2CEx_ConfigDigitalFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_I2CEx_ConfigDigitalFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[53]"></a>HAL_I2C_Init</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, stm32l0xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[55]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 332 bytes, Stack size 48 bytes, stm32l0xx_hal_i2c.o(i.HAL_I2C_Mem_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_read
</UL>

<P><STRONG><a name="[5a]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 326 bytes, Stack size 48 bytes, stm32l0xx_hal_i2c.o(i.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_write
</UL>

<P><STRONG><a name="[54]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, i2c.o(i.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[79]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[5f]"></a>HAL_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32l0xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[60]"></a>HAL_InitTick</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32l0xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_InitTick &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[61]"></a>HAL_MspInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l0xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[64]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l0xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[66]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 330 bytes, Stack size 24 bytes, stm32l0xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[67]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 386 bytes, Stack size 24 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[7b]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[7d]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[68]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[6a]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1074 bytes, Stack size 32 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[63]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32l0xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[6b]"></a>HAL_UART_Init</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
</UL>

<P><STRONG><a name="[6c]"></a>HAL_UART_MspInit</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[70]"></a>HAL_UART_Transmit</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, stm32l0xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout &rArr; UART_EndRxTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010xb.o(RESET)
</UL>
<P><STRONG><a name="[16d]"></a>MX_GPIO_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MX_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74]"></a>MX_I2C1_Init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, i2c.o(i.MX_I2C1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_I2C1_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigDigitalFilter
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[78]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usart.o(i.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010xb.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010xb.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010xb.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010xb.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>SystemClock_Config</STRONG> (Thumb, 138 bytes, Stack size 104 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_stm32l0xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l010xb.o(.text)
</UL>
<P><STRONG><a name="[6e]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[6f]"></a>UART_CheckIdleState</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, stm32l0xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout &rArr; UART_EndRxTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[6d]"></a>UART_SetConfig</STRONG> (Thumb, 448 bytes, Stack size 24 bytes, stm32l0xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[71]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, stm32l0xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_WaitOnFlagUntilTimeout &rArr; UART_EndRxTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[7f]"></a>__0printf</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[189]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[153]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_iot_loop
</UL>

<P><STRONG><a name="[18a]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[18b]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[81]"></a>__0vsprintf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[18c]"></a>__1vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[18d]"></a>__2vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[18e]"></a>__c89vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[167]"></a>vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print
</UL>

<P><STRONG><a name="[4b]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[69]"></a>__ARM_common_ll_muluu</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, main.o(i.__ARM_common_ll_muluu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timestamp_us
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorStatusTracker_updateInterfaceDependency
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[7c]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32l0xx_hal_dma.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_SensorStatusTracker_setState
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_GasHumidityBaselineTracker_setState
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorStatusTracker_getState
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_getState
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_getState
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_configure
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_setState
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_getState
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_configure
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_updateChannelInterfaceDependency
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_convert_to_enum_OutputIdentifier
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_setChannelState
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_Bsec_setHyperConfiguration
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_configureChannel
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_getChannelState
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_bsec_process_data
</UL>

<P><STRONG><a name="[16a]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>

<P><STRONG><a name="[82]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmod
</UL>

<P><STRONG><a name="[83]"></a>__mathlib_flt_divzero</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, funder.o(i.__mathlib_flt_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_flt_divzero &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10f
</UL>

<P><STRONG><a name="[84]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __mathlib_flt_infnan
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10f
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>

<P><STRONG><a name="[86]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = __mathlib_flt_infnan2 &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
</UL>

<P><STRONG><a name="[87]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_flt_invalid &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10f
</UL>

<P><STRONG><a name="[88]"></a>__mathlib_flt_overflow</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, funder.o(i.__mathlib_flt_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __mathlib_flt_overflow
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>

<P><STRONG><a name="[89]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __mathlib_flt_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>

<P><STRONG><a name="[8a]"></a>__mathlib_rredf2</STRONG> (Thumb, 366 bytes, Stack size 48 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
</UL>

<P><STRONG><a name="[18f]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[190]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[191]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[169]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10f
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmod
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>

<P><STRONG><a name="[16e]"></a>allocateMemory</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsec_integration.o(i.allocateMemory))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[95]"></a>bme68x_get_conf</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, bme68x.o(i.bme68x_get_conf))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bme68x_get_conf &rArr; bme68x_get_regs &rArr; set_mem_page
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBme68xConfigParallel
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBme68xConfigForced
</UL>

<P><STRONG><a name="[97]"></a>bme68x_get_data</STRONG> (Thumb, 294 bytes, Stack size 168 bytes, bme68x.o(i.bme68x_get_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = bme68x_get_data &rArr; read_all_field_data &rArr; calc_gas_resistance_low &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_fields
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_field_data
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_all_field_data
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_iot_loop
</UL>

<P><STRONG><a name="[9d]"></a>bme68x_get_meas_dur</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, bme68x.o(i.bme68x_get_meas_dur))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bme68x_get_meas_dur &rArr; boundary_check
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boundary_check
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMeasDur
</UL>

<P><STRONG><a name="[9f]"></a>bme68x_get_op_mode</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bme68x.o(i.bme68x_get_op_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bme68x_get_op_mode &rArr; bme68x_get_regs &rArr; set_mem_page
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_set_conf
</UL>

<P><STRONG><a name="[96]"></a>bme68x_get_regs</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, bme68x.o(i.bme68x_get_regs))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bme68x_get_regs &rArr; set_mem_page
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mem_page
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_get_op_mode
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_field_data
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_all_field_data
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_calib_data
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_set_op_mode
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_set_heatr_conf
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_set_conf
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_get_conf
</UL>

<P><STRONG><a name="[a1]"></a>bme68x_init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, bme68x.o(i.bme68x_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = bme68x_init &rArr; get_calib_data &rArr; bme68x_get_regs &rArr; set_mem_page
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_soft_reset
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_get_regs
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_calib_data
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_iot_init
</UL>

<P><STRONG><a name="[a4]"></a>bme68x_set_conf</STRONG> (Thumb, 292 bytes, Stack size 64 bytes, bme68x.o(i.bme68x_set_conf))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = bme68x_set_conf &rArr; bme68x_set_op_mode &rArr; bme68x_set_regs &rArr; set_mem_page
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_set_regs
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_get_regs
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_get_op_mode
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boundary_check
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_set_op_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBme68xConfigParallel
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBme68xConfigForced
</UL>

<P><STRONG><a name="[a7]"></a>bme68x_set_heatr_conf</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, bme68x.o(i.bme68x_set_heatr_conf))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = bme68x_set_heatr_conf &rArr; set_conf &rArr; bme68x_set_regs &rArr; set_mem_page
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_set_regs
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_get_regs
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_conf
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_set_op_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBme68xConfigParallel
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBme68xConfigForced
</UL>

<P><STRONG><a name="[a5]"></a>bme68x_set_op_mode</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, bme68x.o(i.bme68x_set_op_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = bme68x_set_op_mode &rArr; bme68x_set_regs &rArr; set_mem_page
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_set_regs
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_iot_loop
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_set_heatr_conf
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_set_conf
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBme68xConfigParallel
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBme68xConfigForced
</UL>

<P><STRONG><a name="[a6]"></a>bme68x_set_regs</STRONG> (Thumb, 158 bytes, Stack size 56 bytes, bme68x.o(i.bme68x_set_regs))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bme68x_set_regs &rArr; set_mem_page
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mem_page
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_soft_reset
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_conf
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_set_op_mode
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_set_heatr_conf
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_set_conf
</UL>

<P><STRONG><a name="[a2]"></a>bme68x_soft_reset</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, bme68x.o(i.bme68x_soft_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = bme68x_soft_reset &rArr; bme68x_set_regs &rArr; set_mem_page
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_set_regs
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mem_page
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_init
</UL>

<P><STRONG><a name="[13b]"></a>bsec_Bsec_append</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, Bsec.o(i.bsec_Bsec_append))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bsec_Bsec_append
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_get_state
</UL>

<P><STRONG><a name="[aa]"></a>bsec_Bsec_applyUpdateSubscription</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, Bsec.o(i.bsec_Bsec_applyUpdateSubscription))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = bsec_Bsec_applyUpdateSubscription &rArr; bsec_ChannelHub_updateChannelInterfaceDependency &rArr; bsec_GasHumidityPreProcessor_updateInterfaceDependency &rArr; bsec_ExpSmoothing_setCoeffFromBandwidth &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_updateOutputSamplIntvl
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_updateChannelInterfaceDependency
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_resetSamplIntvls
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_recalculateDownsampling
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_setHyperConfiguration
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_Bsec_setHyperConfiguration
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_sensor_control
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_do_steps
</UL>

<P><STRONG><a name="[af]"></a>bsec_Bsec_checkIfSensorRequired</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, Bsec.o(i.bsec_Bsec_checkIfSensorRequired))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = bsec_Bsec_checkIfSensorRequired &rArr; rem_uint16_t &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rem_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_sensor_control
</UL>

<P><STRONG><a name="[b1]"></a>bsec_Bsec_checkSamplIntvlCompatibility</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, Bsec.o(i.bsec_Bsec_checkSamplIntvlCompatibility))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = bsec_Bsec_checkSamplIntvlCompatibility &rArr; rem_uint16_t &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rem_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_update_subscription
</UL>

<P><STRONG><a name="[b2]"></a>bsec_Bsec_frameSerializedData</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, Bsec.o(i.bsec_Bsec_frameSerializedData))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = bsec_Bsec_frameSerializedData &rArr; bsec_crcCcitt2
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_crcCcitt2
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_get_state
</UL>

<P><STRONG><a name="[136]"></a>bsec_Bsec_getInputSample</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, Bsec.o(i.bsec_Bsec_getInputSample))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bsec_Bsec_getInputSample
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_do_steps
</UL>

<P><STRONG><a name="[b5]"></a>bsec_Bsec_isGasIndexNew</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, Bsec.o(i.bsec_Bsec_isGasIndexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bsec_Bsec_isGasIndexNew &rArr; bsec_ChannelHub_getInput
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_getInput
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_do_steps
</UL>

<P><STRONG><a name="[145]"></a>bsec_Bsec_parse</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, Bsec.o(i.bsec_Bsec_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsec_Bsec_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_set_state
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_set_configuration
</UL>

<P><STRONG><a name="[bb]"></a>bsec_Bsec_requestOutput</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, Bsec.o(i.bsec_Bsec_requestOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsec_Bsec_requestOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_setHyperConfiguration
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_Bsec_setHyperConfiguration
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_update_subscription
</UL>

<P><STRONG><a name="[b8]"></a>bsec_Bsec_setHyperConfiguration</STRONG> (Thumb, 684 bytes, Stack size 64 bytes, Bsec.o(i.bsec_Bsec_setHyperConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = bsec_Bsec_setHyperConfiguration &rArr; bsec_Bsec_applyUpdateSubscription &rArr; bsec_ChannelHub_updateChannelInterfaceDependency &rArr; bsec_GasHumidityPreProcessor_updateInterfaceDependency &rArr; bsec_ExpSmoothing_setCoeffFromBandwidth &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_getSensorRange
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_convert_to_enum_OutputIdentifier
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_requestOutput
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_applyUpdateSubscription
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_constructor_bsec
</UL>

<P><STRONG><a name="[149]"></a>bsec_Bsec_setHyperState</STRONG> (Thumb, 126 bytes, Stack size 20 bytes, Bsec.o(i.bsec_Bsec_setHyperState))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bsec_Bsec_setHyperState
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_constructor_bsec
</UL>

<P><STRONG><a name="[141]"></a>bsec_Bsec_setSensorOpMode</STRONG> (Thumb, 258 bytes, Stack size 20 bytes, Bsec.o(i.bsec_Bsec_setSensorOpMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bsec_Bsec_setSensorOpMode
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_sensor_control
</UL>

<P><STRONG><a name="[bc]"></a>bsec_Bsec_validateSerialization</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, Bsec.o(i.bsec_Bsec_validateSerialization))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = bsec_Bsec_validateSerialization &rArr; bsec_crcCcitt2
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_crcCcitt2
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_set_state
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_set_configuration
</UL>

<P><STRONG><a name="[bd]"></a>bsec_ChannelHub_ChannelHub</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, ChannelHub.o(i.bsec_ChannelHub_ChannelHub))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = bsec_ChannelHub_ChannelHub &rArr; bsec_GasHumidityBaselineTracker_GasHumidityBaselineTracker &rArr; __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorStatusTracker_SensorStatusTracker
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_SensorHeatCompensator
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_IaqEstimator
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_HumidityTemperatureCorrector
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityPreProcessor_GasHumidityPreProcessor
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_GasHumidityBaselineTracker
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_GasEstimator
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_resetSamplIntvls
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_constructor_bsec
</UL>

<P><STRONG><a name="[c5]"></a>bsec_ChannelHub_configureChannel</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, ChannelHub.o(i.bsec_ChannelHub_configureChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = bsec_ChannelHub_configureChannel &rArr; bsec_GasEstimator_configure &rArr; bsec_r_Entity_parseAndDeserialize
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorStatusTracker_configure
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_configure
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_configure
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_configure
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityPreProcessor_configure
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_configure
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_configure
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_set_configuration
</UL>

<P><STRONG><a name="[cd]"></a>bsec_ChannelHub_do</STRONG> (Thumb, 1324 bytes, Stack size 216 bytes, ChannelHub.o(i.bsec_ChannelHub_do))
<BR><BR>[Stack]<UL><LI>Max Depth = 692<LI>Call Chain = bsec_ChannelHub_do &rArr; bsec_GasEstimator_doStep &rArr; bsec_GasEstimator_estimateGas &rArr; bsec_GasEstimator_applyTransferFunction &rArr; bsec_GasEstimator_softmaxApply &rArr; expf &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorStatusTracker_doStep
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_doStep
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_doStep
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_doStep
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityPreProcessor_doStep
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_doStep
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_doStep
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_c_ChannelHub_setOutput
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_ChannelHub_setOutput
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_setOutput
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_isChannelReady
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_do_steps
</UL>

<P><STRONG><a name="[d9]"></a>bsec_ChannelHub_getChannelState</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, ChannelHub.o(i.bsec_ChannelHub_getChannelState))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = bsec_ChannelHub_getChannelState &rArr; bsec_GasEstimator_getState &rArr; bsec_i_Entity_serializeAndAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorStatusTracker_getState
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_getState
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_getState
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_getState
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityPreProcessor_getState
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_getState
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_getState
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_get_state
</UL>

<P><STRONG><a name="[b6]"></a>bsec_ChannelHub_getInput</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ChannelHub.o(i.bsec_ChannelHub_getInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsec_ChannelHub_getInput
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_isGasIndexNew
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_do_steps
</UL>

<P><STRONG><a name="[139]"></a>bsec_ChannelHub_getOutput</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, ChannelHub.o(i.bsec_ChannelHub_getOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bsec_ChannelHub_getOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_do_steps
</UL>

<P><STRONG><a name="[ad]"></a>bsec_ChannelHub_recalculateDownsampling</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, ChannelHub.o(i.bsec_ChannelHub_recalculateDownsampling))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = bsec_ChannelHub_recalculateDownsampling &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_applyUpdateSubscription
</UL>

<P><STRONG><a name="[ab]"></a>bsec_ChannelHub_resetSamplIntvls</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, ChannelHub.o(i.bsec_ChannelHub_resetSamplIntvls))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bsec_ChannelHub_resetSamplIntvls
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_ChannelHub
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_applyUpdateSubscription
</UL>

<P><STRONG><a name="[e1]"></a>bsec_ChannelHub_setChannelState</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, ChannelHub.o(i.bsec_ChannelHub_setChannelState))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = bsec_ChannelHub_setChannelState &rArr; bsec_GasEstimator_setState &rArr; bsec_h_Entity_parseAndDeserialize
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_SensorStatusTracker_setState
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_IaqEstimator_setState
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_GasHumidityBaselineTracker_setState
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_setState
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_setState
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityPreProcessor_setState
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_setState
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_set_state
</UL>

<P><STRONG><a name="[137]"></a>bsec_ChannelHub_setInput</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, ChannelHub.o(i.bsec_ChannelHub_setInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bsec_ChannelHub_setInput
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_sensor_control
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_do_steps
</UL>

<P><STRONG><a name="[ae]"></a>bsec_ChannelHub_updateChannelInterfaceDependency</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, ChannelHub.o(i.bsec_ChannelHub_updateChannelInterfaceDependency))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = bsec_ChannelHub_updateChannelInterfaceDependency &rArr; bsec_GasHumidityPreProcessor_updateInterfaceDependency &rArr; bsec_ExpSmoothing_setCoeffFromBandwidth &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorStatusTracker_updateInterfaceDependency
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_updateInterfaceDependency
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_updateInterfaceDependency
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityPreProcessor_updateInterfaceDependency
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_updateInterfaceDependency
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_applyUpdateSubscription
</UL>

<P><STRONG><a name="[ac]"></a>bsec_ChannelHub_updateOutputSamplIntvl</STRONG> (Thumb, 148 bytes, Stack size 20 bytes, ChannelHub.o(i.bsec_ChannelHub_updateOutputSamplIntvl))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bsec_ChannelHub_updateOutputSamplIntvl
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_applyUpdateSubscription
</UL>

<P><STRONG><a name="[11f]"></a>bsec_Channel_reset</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, Channel.o(i.bsec_Channel_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsec_Channel_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityPreProcessor_GasHumidityPreProcessor
</UL>

<P><STRONG><a name="[120]"></a>bsec_Entity_parseAndDeserialize</STRONG> (Thumb, 34 bytes, Stack size 28 bytes, Entity.o(i.bsec_Entity_parseAndDeserialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = bsec_Entity_parseAndDeserialize
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityPreProcessor_setState
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityPreProcessor_configure
</UL>

<P><STRONG><a name="[121]"></a>bsec_Entity_serializeAndAdd</STRONG> (Thumb, 48 bytes, Stack size 28 bytes, Entity.o(i.bsec_Entity_serializeAndAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = bsec_Entity_serializeAndAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityPreProcessor_getState
</UL>

<P><STRONG><a name="[11e]"></a>bsec_ExpSmoothingBsec_ExpSmoothingBsec</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ExpSmoothingBsec.o(i.bsec_ExpSmoothingBsec_ExpSmoothingBsec))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityPreProcessor_GasHumidityPreProcessor
</UL>

<P><STRONG><a name="[ef]"></a>bsec_ExpSmoothing_setCoeffFromBandwidth</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, ExpSmoothing.o(i.bsec_ExpSmoothing_setCoeffFromBandwidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = bsec_ExpSmoothing_setCoeffFromBandwidth &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityPreProcessor_updateInterfaceDependency
</UL>

<P><STRONG><a name="[c4]"></a>bsec_GasEstimator_GasEstimator</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, GasEstimator.o(i.bsec_GasEstimator_GasEstimator))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsec_GasEstimator_GasEstimator &rArr; bsec_GasEstimator_resetGasEstimator
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_resetGasEstimator
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_ChannelHub
</UL>

<P><STRONG><a name="[cc]"></a>bsec_GasEstimator_configure</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, GasEstimator.o(i.bsec_GasEstimator_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = bsec_GasEstimator_configure &rArr; bsec_r_Entity_parseAndDeserialize
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_u_Entity_parseAndDeserialize
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_t_Entity_parseAndDeserialize
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_s_Entity_parseAndDeserialize
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_r_Entity_parseAndDeserialize
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_q_Entity_parseAndDeserialize
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_m_Entity_parseAndDeserialize
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_h_Entity_parseAndDeserialize
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_f_Entity_parseAndDeserialize
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Serialization_checkSerializationHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_configureChannel
</UL>

<P><STRONG><a name="[d7]"></a>bsec_GasEstimator_doStep</STRONG> (Thumb, 234 bytes, Stack size 104 bytes, GasEstimator.o(i.bsec_GasEstimator_doStep))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = bsec_GasEstimator_doStep &rArr; bsec_GasEstimator_estimateGas &rArr; bsec_GasEstimator_applyTransferFunction &rArr; bsec_GasEstimator_softmaxApply &rArr; expf &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_resetGasEstimator
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_preprocessInput
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_estimateGas
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_denormalization
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roundf
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_do
</UL>

<P><STRONG><a name="[e0]"></a>bsec_GasEstimator_getState</STRONG> (Thumb, 154 bytes, Stack size 56 bytes, GasEstimator.o(i.bsec_GasEstimator_getState))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = bsec_GasEstimator_getState &rArr; bsec_i_Entity_serializeAndAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_i_Entity_serializeAndAdd
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_e_Entity_serializeAndAdd
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_f_Entity_serializeAndAdd
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Serialization_prepareSerializationHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_getChannelState
</UL>

<P><STRONG><a name="[e8]"></a>bsec_GasEstimator_setState</STRONG> (Thumb, 152 bytes, Stack size 56 bytes, GasEstimator.o(i.bsec_GasEstimator_setState))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = bsec_GasEstimator_setState &rArr; bsec_h_Entity_parseAndDeserialize
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_h_Entity_parseAndDeserialize
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_e_Entity_parseAndDeserialize
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_f_Entity_parseAndDeserialize
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Serialization_checkSerializationHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_setChannelState
</UL>

<P><STRONG><a name="[c1]"></a>bsec_GasHumidityBaselineTracker_GasHumidityBaselineTracker</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, GasHumidityBaselineTracker.o(i.bsec_GasHumidityBaselineTracker_GasHumidityBaselineTracker))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = bsec_GasHumidityBaselineTracker_GasHumidityBaselineTracker &rArr; __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_setState
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_ChannelHub
</UL>

<P><STRONG><a name="[c7]"></a>bsec_GasHumidityBaselineTracker_configure</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, GasHumidityBaselineTracker.o(i.bsec_GasHumidityBaselineTracker_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bsec_GasHumidityBaselineTracker_configure &rArr; bsec_o_Entity_parseAndDeserialize
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_o_Entity_parseAndDeserialize
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_n_Entity_parseAndDeserialize
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_m_Entity_parseAndDeserialize
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_Entity_parseAndDeserialize
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Serialization_checkSerializationHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_configureChannel
</UL>

<P><STRONG><a name="[d2]"></a>bsec_GasHumidityBaselineTracker_doStep</STRONG> (Thumb, 498 bytes, Stack size 56 bytes, GasHumidityBaselineTracker.o(i.bsec_GasHumidityBaselineTracker_doStep))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = bsec_GasHumidityBaselineTracker_doStep &rArr; bsec_GasHumidityBaselineTracker_vocFeatureTempHumComp &rArr; log10f &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_vocFeatureTempHumComp
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_isBaselineAllowedAdapt
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_getMinimumFilterDistance
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_filterRobustMaxMin
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_determineAccuracyLevel
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_do
</UL>

<P><STRONG><a name="[db]"></a>bsec_GasHumidityBaselineTracker_getState</STRONG> (Thumb, 208 bytes, Stack size 48 bytes, GasHumidityBaselineTracker.o(i.bsec_GasHumidityBaselineTracker_getState))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bsec_GasHumidityBaselineTracker_getState &rArr; bsec_b_Entity_serializeAndAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_e_Entity_serializeAndAdd
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_Entity_serializeAndAdd
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_f_Entity_serializeAndAdd
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_d_Entity_serializeAndAdd
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_c_Entity_serializeAndAdd
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Serialization_prepareSerializationHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_getChannelState
</UL>

<P><STRONG><a name="[10d]"></a>bsec_GasHumidityBaselineTracker_setState</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, GasHumidityBaselineTracker.o(i.bsec_GasHumidityBaselineTracker_setState))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_GasHumidityBaselineTracker
</UL>

<P><STRONG><a name="[eb]"></a>bsec_GasHumidityBaselineTracker_updateInterfaceDependency</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, GasHumidityBaselineTracker.o(i.bsec_GasHumidityBaselineTracker_updateInterfaceDependency))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = bsec_GasHumidityBaselineTracker_updateInterfaceDependency &rArr; log10f &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10f
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floorf
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_updateChannelInterfaceDependency
</UL>

<P><STRONG><a name="[be]"></a>bsec_GasHumidityPreProcessor_GasHumidityPreProcessor</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, GasHumidityPreProcessor.o(i.bsec_GasHumidityPreProcessor_GasHumidityPreProcessor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsec_GasHumidityPreProcessor_GasHumidityPreProcessor &rArr; bsec_Channel_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ExpSmoothingBsec_ExpSmoothingBsec
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Channel_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_ChannelHub
</UL>

<P><STRONG><a name="[c6]"></a>bsec_GasHumidityPreProcessor_configure</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, GasHumidityPreProcessor.o(i.bsec_GasHumidityPreProcessor_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = bsec_GasHumidityPreProcessor_configure &rArr; bsec_Entity_parseAndDeserialize
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Entity_parseAndDeserialize
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Serialization_checkSerializationHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_configureChannel
</UL>

<P><STRONG><a name="[d1]"></a>bsec_GasHumidityPreProcessor_doStep</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, GasHumidityPreProcessor.o(i.bsec_GasHumidityPreProcessor_doStep))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = bsec_GasHumidityPreProcessor_doStep &rArr; log10f &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10f
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_do
</UL>

<P><STRONG><a name="[da]"></a>bsec_GasHumidityPreProcessor_getState</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, GasHumidityPreProcessor.o(i.bsec_GasHumidityPreProcessor_getState))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = bsec_GasHumidityPreProcessor_getState &rArr; bsec_Entity_serializeAndAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Entity_serializeAndAdd
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Serialization_prepareSerializationHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_getChannelState
</UL>

<P><STRONG><a name="[e2]"></a>bsec_GasHumidityPreProcessor_setState</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, GasHumidityPreProcessor.o(i.bsec_GasHumidityPreProcessor_setState))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = bsec_GasHumidityPreProcessor_setState &rArr; bsec_Entity_parseAndDeserialize
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Entity_parseAndDeserialize
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Serialization_checkSerializationHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_setChannelState
</UL>

<P><STRONG><a name="[ea]"></a>bsec_GasHumidityPreProcessor_updateInterfaceDependency</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, GasHumidityPreProcessor.o(i.bsec_GasHumidityPreProcessor_updateInterfaceDependency))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = bsec_GasHumidityPreProcessor_updateInterfaceDependency &rArr; bsec_ExpSmoothing_setCoeffFromBandwidth &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ExpSmoothing_setCoeffFromBandwidth
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_updateChannelInterfaceDependency
</UL>

<P><STRONG><a name="[c3]"></a>bsec_HumidityTemperatureCorrector_HumidityTemperatureCorrector</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, HumidityTemperatureCorrector.o(i.bsec_HumidityTemperatureCorrector_HumidityTemperatureCorrector))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsec_HumidityTemperatureCorrector_HumidityTemperatureCorrector &rArr; bsec_b_Channel_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_ExpSmoothingBsec_ExpSmoothingBsec
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_Channel_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_ChannelHub
</UL>

<P><STRONG><a name="[cb]"></a>bsec_HumidityTemperatureCorrector_configure</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, HumidityTemperatureCorrector.o(i.bsec_HumidityTemperatureCorrector_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bsec_HumidityTemperatureCorrector_configure &rArr; bsec_b_Entity_parseAndDeserialize
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_Entity_parseAndDeserialize
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Serialization_checkSerializationHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_configureChannel
</UL>

<P><STRONG><a name="[d6]"></a>bsec_HumidityTemperatureCorrector_doStep</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, HumidityTemperatureCorrector.o(i.bsec_HumidityTemperatureCorrector_doStep))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = bsec_HumidityTemperatureCorrector_doStep &rArr; bsec_convertHumidity &rArr; logf &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fminf
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_convertHumidity
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_do
</UL>

<P><STRONG><a name="[df]"></a>bsec_HumidityTemperatureCorrector_getState</STRONG> (Thumb, 80 bytes, Stack size 48 bytes, HumidityTemperatureCorrector.o(i.bsec_HumidityTemperatureCorrector_getState))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bsec_HumidityTemperatureCorrector_getState &rArr; bsec_e_Entity_serializeAndAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_e_Entity_serializeAndAdd
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Serialization_prepareSerializationHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_getChannelState
</UL>

<P><STRONG><a name="[e7]"></a>bsec_HumidityTemperatureCorrector_setState</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, HumidityTemperatureCorrector.o(i.bsec_HumidityTemperatureCorrector_setState))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = bsec_HumidityTemperatureCorrector_setState &rArr; bsec_Serialization_checkSerializationHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_e_Entity_parseAndDeserialize
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Serialization_checkSerializationHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_setChannelState
</UL>

<P><STRONG><a name="[ee]"></a>bsec_HumidityTemperatureCorrector_updateInterfaceDependency</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, HumidityTemperatureCorrector.o(i.bsec_HumidityTemperatureCorrector_updateInterfaceDependency))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = bsec_HumidityTemperatureCorrector_updateInterfaceDependency &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fminf
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_updateChannelInterfaceDependency
</UL>

<P><STRONG><a name="[c0]"></a>bsec_IaqEstimator_IaqEstimator</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, IaqEstimator.o(i.bsec_IaqEstimator_IaqEstimator))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = bsec_IaqEstimator_IaqEstimator
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_setState
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_ChannelHub
</UL>

<P><STRONG><a name="[c9]"></a>bsec_IaqEstimator_configure</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, IaqEstimator.o(i.bsec_IaqEstimator_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = bsec_IaqEstimator_configure &rArr; bsec_Serialization_checkSerializationHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_e_Entity_parseAndDeserialize
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Serialization_checkSerializationHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_configureChannel
</UL>

<P><STRONG><a name="[d4]"></a>bsec_IaqEstimator_doStep</STRONG> (Thumb, 386 bytes, Stack size 40 bytes, IaqEstimator.o(i.bsec_IaqEstimator_doStep))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = bsec_IaqEstimator_doStep &rArr; powf &rArr; __mathlib_flt_infnan2 &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fminf
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmaxf
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_do
</UL>

<P><STRONG><a name="[dd]"></a>bsec_IaqEstimator_getState</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, IaqEstimator.o(i.bsec_IaqEstimator_getState))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bsec_IaqEstimator_getState &rArr; bsec_e_Entity_serializeAndAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_e_Entity_serializeAndAdd
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Serialization_prepareSerializationHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_getChannelState
</UL>

<P><STRONG><a name="[125]"></a>bsec_IaqEstimator_setState</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, IaqEstimator.o(i.bsec_IaqEstimator_setState))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_IaqEstimator
</UL>

<P><STRONG><a name="[ed]"></a>bsec_IaqEstimator_updateInterfaceDependency</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, IaqEstimator.o(i.bsec_IaqEstimator_updateInterfaceDependency))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = bsec_IaqEstimator_updateInterfaceDependency &rArr; log10f &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10f
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_updateChannelInterfaceDependency
</UL>

<P><STRONG><a name="[c2]"></a>bsec_SensorHeatCompensator_SensorHeatCompensator</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, SensorHeatCompensator.o(i.bsec_SensorHeatCompensator_SensorHeatCompensator))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsec_SensorHeatCompensator_SensorHeatCompensator
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_ChannelHub
</UL>

<P><STRONG><a name="[ca]"></a>bsec_SensorHeatCompensator_configure</STRONG> (Thumb, 118 bytes, Stack size 56 bytes, SensorHeatCompensator.o(i.bsec_SensorHeatCompensator_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bsec_SensorHeatCompensator_configure &rArr; bsec_o_Entity_parseAndDeserialize
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_o_Entity_parseAndDeserialize
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_e_Entity_parseAndDeserialize
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Serialization_checkSerializationHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_configureChannel
</UL>

<P><STRONG><a name="[d5]"></a>bsec_SensorHeatCompensator_doStep</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, SensorHeatCompensator.o(i.bsec_SensorHeatCompensator_doStep))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = bsec_SensorHeatCompensator_doStep &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_isequal
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_do
</UL>

<P><STRONG><a name="[de]"></a>bsec_SensorHeatCompensator_getState</STRONG> (Thumb, 88 bytes, Stack size 56 bytes, SensorHeatCompensator.o(i.bsec_SensorHeatCompensator_getState))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bsec_SensorHeatCompensator_getState &rArr; bsec_g_Entity_serializeAndAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_g_Entity_serializeAndAdd
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Serialization_prepareSerializationHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_getChannelState
</UL>

<P><STRONG><a name="[e6]"></a>bsec_SensorHeatCompensator_setState</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, SensorHeatCompensator.o(i.bsec_SensorHeatCompensator_setState))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = bsec_SensorHeatCompensator_setState &rArr; bsec_g_Entity_parseAndDeserialize
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_g_Entity_parseAndDeserialize
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Serialization_checkSerializationHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_setChannelState
</UL>

<P><STRONG><a name="[bf]"></a>bsec_SensorStatusTracker_SensorStatusTracker</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, SensorStatusTracker.o(i.bsec_SensorStatusTracker_SensorStatusTracker))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsec_SensorStatusTracker_SensorStatusTracker
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_ChannelHub
</UL>

<P><STRONG><a name="[c8]"></a>bsec_SensorStatusTracker_configure</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, SensorStatusTracker.o(i.bsec_SensorStatusTracker_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = bsec_SensorStatusTracker_configure &rArr; bsec_Serialization_checkSerializationHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_p_Entity_parseAndDeserialize
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_e_Entity_parseAndDeserialize
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Serialization_checkSerializationHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_configureChannel
</UL>

<P><STRONG><a name="[cf]"></a>bsec_SensorStatusTracker_doStep</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, SensorStatusTracker.o(i.bsec_SensorStatusTracker_doStep))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = bsec_SensorStatusTracker_doStep &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2f
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorStatusTracker_resetRunInState
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_do
</UL>

<P><STRONG><a name="[dc]"></a>bsec_SensorStatusTracker_getState</STRONG> (Thumb, 152 bytes, Stack size 56 bytes, SensorStatusTracker.o(i.bsec_SensorStatusTracker_getState))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bsec_SensorStatusTracker_getState &rArr; bsec_g_Entity_serializeAndAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_h_Entity_serializeAndAdd
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_g_Entity_serializeAndAdd
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_e_Entity_serializeAndAdd
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Serialization_prepareSerializationHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_getChannelState
</UL>

<P><STRONG><a name="[ec]"></a>bsec_SensorStatusTracker_updateInterfaceDependency</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, SensorStatusTracker.o(i.bsec_SensorStatusTracker_updateInterfaceDependency))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bsec_SensorStatusTracker_updateInterfaceDependency &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorStatusTracker_resetRunInState
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_updateChannelInterfaceDependency
</UL>

<P><STRONG><a name="[f7]"></a>bsec_Serialization_checkSerializationHeader</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, Serialization.o(i.bsec_Serialization_checkSerializationHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bsec_Serialization_checkSerializationHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_SensorStatusTracker_setState
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_IaqEstimator_setState
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_GasHumidityBaselineTracker_setState
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorStatusTracker_configure
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_setState
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_configure
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_configure
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_setState
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_configure
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityPreProcessor_setState
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityPreProcessor_configure
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_configure
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_setState
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_configure
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_Bsec_setHyperConfiguration
</UL>

<P><STRONG><a name="[107]"></a>bsec_Serialization_prepareSerializationHeader</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, Serialization.o(i.bsec_Serialization_prepareSerializationHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsec_Serialization_prepareSerializationHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorStatusTracker_getState
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_getState
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_getState
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_getState
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityPreProcessor_getState
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_getState
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_getState
</UL>

<P><STRONG><a name="[12d]"></a>bsec_b_Bsec_setHyperConfiguration</STRONG> (Thumb, 398 bytes, Stack size 56 bytes, Bsec.o(i.bsec_b_Bsec_setHyperConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = bsec_b_Bsec_setHyperConfiguration &rArr; bsec_j_Entity_parseAndDeserialize
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_l_Entity_parseAndDeserialize
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_k_Entity_parseAndDeserialize
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_j_Entity_parseAndDeserialize
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_i_Entity_parseAndDeserialize
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_f_Entity_parseAndDeserialize
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_d_Entity_parseAndDeserialize
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_c_Entity_parseAndDeserialize
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Serialization_checkSerializationHeader
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_convert_to_enum_OutputIdentifier
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_requestOutput
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_applyUpdateSubscription
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_set_configuration
</UL>

<P><STRONG><a name="[147]"></a>bsec_b_Bsec_setHyperState</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, Bsec.o(i.bsec_b_Bsec_setHyperState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsec_b_Bsec_setHyperState
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_set_state
</UL>

<P><STRONG><a name="[138]"></a>bsec_b_ChannelHub_getInput</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ChannelHub.o(i.bsec_b_ChannelHub_getInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsec_b_ChannelHub_getInput
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_do_steps
</UL>

<P><STRONG><a name="[123]"></a>bsec_b_Channel_reset</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, Channel.o(i.bsec_b_Channel_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsec_b_Channel_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_HumidityTemperatureCorrector
</UL>

<P><STRONG><a name="[10e]"></a>bsec_b_Entity_parseAndDeserialize</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, Entity.o(i.bsec_b_Entity_parseAndDeserialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsec_b_Entity_parseAndDeserialize
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_GasHumidityBaselineTracker_setState
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_configure
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_configure
</UL>

<P><STRONG><a name="[117]"></a>bsec_b_Entity_serializeAndAdd</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, Entity.o(i.bsec_b_Entity_serializeAndAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsec_b_Entity_serializeAndAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_getState
</UL>

<P><STRONG><a name="[122]"></a>bsec_b_ExpSmoothingBsec_ExpSmoothingBsec</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ExpSmoothingBsec.o(i.bsec_b_ExpSmoothingBsec_ExpSmoothingBsec))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_HumidityTemperatureCorrector
</UL>

<P><STRONG><a name="[e3]"></a>bsec_b_GasHumidityBaselineTracker_setState</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, GasHumidityBaselineTracker.o(i.bsec_b_GasHumidityBaselineTracker_setState))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bsec_b_GasHumidityBaselineTracker_setState &rArr; bsec_b_Entity_parseAndDeserialize
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_e_Entity_parseAndDeserialize
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_Entity_parseAndDeserialize
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_f_Entity_parseAndDeserialize
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_d_Entity_parseAndDeserialize
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_c_Entity_parseAndDeserialize
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Serialization_checkSerializationHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_setChannelState
</UL>

<P><STRONG><a name="[e5]"></a>bsec_b_IaqEstimator_setState</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, IaqEstimator.o(i.bsec_b_IaqEstimator_setState))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = bsec_b_IaqEstimator_setState &rArr; bsec_Serialization_checkSerializationHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_e_Entity_parseAndDeserialize
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Serialization_checkSerializationHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_setChannelState
</UL>

<P><STRONG><a name="[e4]"></a>bsec_b_SensorStatusTracker_setState</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, SensorStatusTracker.o(i.bsec_b_SensorStatusTracker_setState))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = bsec_b_SensorStatusTracker_setState &rArr; bsec_g_Entity_parseAndDeserialize
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_g_Entity_parseAndDeserialize
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_e_Entity_parseAndDeserialize
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Serialization_checkSerializationHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_setChannelState
</UL>

<P><STRONG><a name="[142]"></a>bsec_c_ChannelHub_getInput</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ChannelHub.o(i.bsec_c_ChannelHub_getInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsec_c_ChannelHub_getInput
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_sensor_control
</UL>

<P><STRONG><a name="[131]"></a>bsec_c_Entity_parseAndDeserialize</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, Entity.o(i.bsec_c_Entity_parseAndDeserialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bsec_c_Entity_parseAndDeserialize
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_GasHumidityBaselineTracker_setState
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_Bsec_setHyperConfiguration
</UL>

<P><STRONG><a name="[119]"></a>bsec_c_Entity_serializeAndAdd</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, Entity.o(i.bsec_c_Entity_serializeAndAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsec_c_Entity_serializeAndAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_getState
</UL>

<P><STRONG><a name="[135]"></a>bsec_codegen_do_steps</STRONG> (Thumb, 730 bytes, Stack size 88 bytes, bsec_codegen_do_steps.o(i.bsec_codegen_do_steps))
<BR><BR>[Stack]<UL><LI>Max Depth = 780<LI>Call Chain = bsec_codegen_do_steps &rArr; bsec_ChannelHub_do &rArr; bsec_GasEstimator_doStep &rArr; bsec_GasEstimator_estimateGas &rArr; bsec_GasEstimator_applyTransferFunction &rArr; bsec_GasEstimator_softmaxApply &rArr; expf &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_ChannelHub_getInput
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_setInput
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_getOutput
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_getInput
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_do
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_isGasIndexNew
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_getInputSample
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_applyUpdateSubscription
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roundf
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_do_steps_m
</UL>

<P><STRONG><a name="[13a]"></a>bsec_codegen_get_state</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, bsec_codegen_get_state.o(i.bsec_codegen_get_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = bsec_codegen_get_state &rArr; bsec_ChannelHub_getChannelState &rArr; bsec_GasEstimator_getState &rArr; bsec_i_Entity_serializeAndAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_getChannelState
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_frameSerializedData
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_append
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_get_state_m
</UL>

<P><STRONG><a name="[14c]"></a>bsec_codegen_get_version</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bsec_codegen_get_version.o(i.bsec_codegen_get_version))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_get_version_m
</UL>

<P><STRONG><a name="[13c]"></a>bsec_codegen_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bsec_codegen_init.o(i.bsec_codegen_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = bsec_codegen_init &rArr; bsec_constructor_bsec &rArr; bsec_Bsec_setHyperConfiguration &rArr; bsec_Bsec_applyUpdateSubscription &rArr; bsec_ChannelHub_updateChannelInterfaceDependency &rArr; bsec_GasHumidityPreProcessor_updateInterfaceDependency &rArr; bsec_ExpSmoothing_setCoeffFromBandwidth &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_constructor_bsec
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_init_m
</UL>

<P><STRONG><a name="[13e]"></a>bsec_codegen_sensor_control</STRONG> (Thumb, 1504 bytes, Stack size 128 bytes, bsec_codegen_sensor_control.o(i.bsec_codegen_sensor_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = bsec_codegen_sensor_control &rArr; bsec_Bsec_applyUpdateSubscription &rArr; bsec_ChannelHub_updateChannelInterfaceDependency &rArr; bsec_GasHumidityPreProcessor_updateInterfaceDependency &rArr; bsec_ExpSmoothing_setCoeffFromBandwidth &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_rt_roundd
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_rem
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_c_ChannelHub_getInput
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_setSensorOpMode
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_checkIfSensorRequired
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2f
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rem_uint16_t
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_setInput
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_applyUpdateSubscription
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roundf
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_sensor_control_m
</UL>

<P><STRONG><a name="[144]"></a>bsec_codegen_set_configuration</STRONG> (Thumb, 150 bytes, Stack size 64 bytes, bsec_codegen_set_configuration.o(i.bsec_codegen_set_configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = bsec_codegen_set_configuration &rArr; bsec_ChannelHub_configureChannel &rArr; bsec_GasEstimator_configure &rArr; bsec_r_Entity_parseAndDeserialize
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_Bsec_setHyperConfiguration
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_configureChannel
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_validateSerialization
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_set_configuration_m
</UL>

<P><STRONG><a name="[146]"></a>bsec_codegen_set_state</STRONG> (Thumb, 126 bytes, Stack size 64 bytes, bsec_codegen_set_state.o(i.bsec_codegen_set_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = bsec_codegen_set_state &rArr; bsec_ChannelHub_setChannelState &rArr; bsec_GasEstimator_setState &rArr; bsec_h_Entity_parseAndDeserialize
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_Bsec_setHyperState
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_setChannelState
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_validateSerialization
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_set_state_m
</UL>

<P><STRONG><a name="[148]"></a>bsec_codegen_update_subscription</STRONG> (Thumb, 876 bytes, Stack size 128 bytes, bsec_codegen_update_subscription.o(i.bsec_codegen_update_subscription))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = bsec_codegen_update_subscription &rArr; bsec_rt_roundd &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_requestOutput
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_checkSamplIntvlCompatibility
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_rt_roundd
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roundf
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_update_subscription_m
</UL>

<P><STRONG><a name="[13d]"></a>bsec_constructor_bsec</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, constructor_bsec.o(i.bsec_constructor_bsec))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = bsec_constructor_bsec &rArr; bsec_Bsec_setHyperConfiguration &rArr; bsec_Bsec_applyUpdateSubscription &rArr; bsec_ChannelHub_updateChannelInterfaceDependency &rArr; bsec_GasHumidityPreProcessor_updateInterfaceDependency &rArr; bsec_ExpSmoothing_setCoeffFromBandwidth &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_ChannelHub
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_setHyperState
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_setHyperConfiguration
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_init
</UL>

<P><STRONG><a name="[124]"></a>bsec_convertHumidity</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, convertHumidity.o(i.bsec_convertHumidity))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = bsec_convertHumidity &rArr; logf &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fminf
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_doStep
</UL>

<P><STRONG><a name="[b4]"></a>bsec_crcCcitt2</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, crcCcitt2.o(i.bsec_crcCcitt2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bsec_crcCcitt2
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_validateSerialization
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_frameSerializedData
</UL>

<P><STRONG><a name="[132]"></a>bsec_d_Entity_parseAndDeserialize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, Entity.o(i.bsec_d_Entity_parseAndDeserialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsec_d_Entity_parseAndDeserialize
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_GasHumidityBaselineTracker_setState
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_Bsec_setHyperConfiguration
</UL>

<P><STRONG><a name="[118]"></a>bsec_d_Entity_serializeAndAdd</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, Entity.o(i.bsec_d_Entity_serializeAndAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsec_d_Entity_serializeAndAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_getState
</UL>

<P><STRONG><a name="[91]"></a>bsec_do_steps_m</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, bsec_interface_multi.o(i.bsec_do_steps_m))
<BR><BR>[Stack]<UL><LI>Max Depth = 804<LI>Call Chain = bsec_do_steps_m &rArr; bsec_codegen_do_steps &rArr; bsec_ChannelHub_do &rArr; bsec_GasEstimator_doStep &rArr; bsec_GasEstimator_estimateGas &rArr; bsec_GasEstimator_applyTransferFunction &rArr; bsec_GasEstimator_softmaxApply &rArr; expf &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_do_steps
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_bsec_process_data
</UL>

<P><STRONG><a name="[10c]"></a>bsec_e_Entity_parseAndDeserialize</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, Entity.o(i.bsec_e_Entity_parseAndDeserialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bsec_e_Entity_parseAndDeserialize
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_SensorStatusTracker_setState
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_IaqEstimator_setState
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_GasHumidityBaselineTracker_setState
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorStatusTracker_configure
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_configure
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_configure
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_setState
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_setState
</UL>

<P><STRONG><a name="[10a]"></a>bsec_e_Entity_serializeAndAdd</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, Entity.o(i.bsec_e_Entity_serializeAndAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsec_e_Entity_serializeAndAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorStatusTracker_getState
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_getState
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_getState
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_getState
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_getState
</UL>

<P><STRONG><a name="[fe]"></a>bsec_f_Entity_parseAndDeserialize</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, Entity.o(i.bsec_f_Entity_parseAndDeserialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsec_f_Entity_parseAndDeserialize
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_GasHumidityBaselineTracker_setState
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_setState
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_configure
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_Bsec_setHyperConfiguration
</UL>

<P><STRONG><a name="[109]"></a>bsec_f_Entity_serializeAndAdd</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, Entity.o(i.bsec_f_Entity_serializeAndAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsec_f_Entity_serializeAndAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_getState
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_getState
</UL>

<P><STRONG><a name="[129]"></a>bsec_g_Entity_parseAndDeserialize</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, Entity.o(i.bsec_g_Entity_parseAndDeserialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bsec_g_Entity_parseAndDeserialize
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_SensorStatusTracker_setState
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_setState
</UL>

<P><STRONG><a name="[128]"></a>bsec_g_Entity_serializeAndAdd</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, Entity.o(i.bsec_g_Entity_serializeAndAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsec_g_Entity_serializeAndAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorStatusTracker_getState
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_getState
</UL>

<P><STRONG><a name="[b9]"></a>bsec_getSensorRange</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, getSensorRange.o(i.bsec_getSensorRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bsec_getSensorRange
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_preprocessInput
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_setHyperConfiguration
</UL>

<P><STRONG><a name="[14a]"></a>bsec_get_state_m</STRONG> (Thumb, 38 bytes, Stack size 48 bytes, bsec_interface_multi.o(i.bsec_get_state_m))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = bsec_get_state_m &rArr; bsec_codegen_get_state &rArr; bsec_ChannelHub_getChannelState &rArr; bsec_GasEstimator_getState &rArr; bsec_i_Entity_serializeAndAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_get_state
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_iot_loop
</UL>

<P><STRONG><a name="[14b]"></a>bsec_get_version_m</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsec_interface_multi.o(i.bsec_get_version_m))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsec_get_version_m
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_get_version
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f8]"></a>bsec_h_Entity_parseAndDeserialize</STRONG> (Thumb, 48 bytes, Stack size 56 bytes, Entity.o(i.bsec_h_Entity_parseAndDeserialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bsec_h_Entity_parseAndDeserialize
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_setState
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_configure
</UL>

<P><STRONG><a name="[12c]"></a>bsec_h_Entity_serializeAndAdd</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, Entity.o(i.bsec_h_Entity_serializeAndAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bsec_h_Entity_serializeAndAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorStatusTracker_getState
</UL>

<P><STRONG><a name="[12e]"></a>bsec_i_Entity_parseAndDeserialize</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, Entity.o(i.bsec_i_Entity_parseAndDeserialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bsec_i_Entity_parseAndDeserialize
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_Bsec_setHyperConfiguration
</UL>

<P><STRONG><a name="[108]"></a>bsec_i_Entity_serializeAndAdd</STRONG> (Thumb, 60 bytes, Stack size 56 bytes, Entity.o(i.bsec_i_Entity_serializeAndAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bsec_i_Entity_serializeAndAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_getState
</UL>

<P><STRONG><a name="[14d]"></a>bsec_init_m</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsec_interface_multi.o(i.bsec_init_m))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = bsec_init_m &rArr; bsec_codegen_init &rArr; bsec_constructor_bsec &rArr; bsec_Bsec_setHyperConfiguration &rArr; bsec_Bsec_applyUpdateSubscription &rArr; bsec_ChannelHub_updateChannelInterfaceDependency &rArr; bsec_GasHumidityPreProcessor_updateInterfaceDependency &rArr; bsec_ExpSmoothing_setCoeffFromBandwidth &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_init
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_iot_init
</UL>

<P><STRONG><a name="[14e]"></a>bsec_iot_init</STRONG> (Thumb, 216 bytes, Stack size 6432 bytes, bsec_integration.o(i.bsec_iot_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 7112<LI>Call Chain = bsec_iot_init &rArr; bsec_set_configuration_m &rArr; bsec_codegen_set_configuration &rArr; bsec_ChannelHub_configureChannel &rArr; bsec_GasEstimator_configure &rArr; bsec_r_Entity_parseAndDeserialize
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_set_state_m
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_set_configuration_m
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_init_m
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_bsec_update_subscription
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[151]"></a>bsec_iot_loop</STRONG> (Thumb, 432 bytes, Stack size 4496 bytes, bsec_integration.o(i.bsec_iot_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 5988<LI>Call Chain = bsec_iot_loop &rArr; processData &rArr; bme68x_bsec_process_data &rArr; bsec_do_steps_m &rArr; bsec_codegen_do_steps &rArr; bsec_ChannelHub_do &rArr; bsec_GasEstimator_doStep &rArr; bsec_GasEstimator_estimateGas &rArr; bsec_GasEstimator_applyTransferFunction &rArr; bsec_GasEstimator_softmaxApply &rArr; expf &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_sensor_control_m
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_get_state_m
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_set_op_mode
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_get_data
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBme68xConfigParallel
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBme68xConfigForced
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processData
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getData
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[127]"></a>bsec_isequal</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, isequal.o(i.bsec_isequal))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_doStep
</UL>

<P><STRONG><a name="[12f]"></a>bsec_j_Entity_parseAndDeserialize</STRONG> (Thumb, 52 bytes, Stack size 296 bytes, Entity.o(i.bsec_j_Entity_parseAndDeserialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = bsec_j_Entity_parseAndDeserialize
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_Bsec_setHyperConfiguration
</UL>

<P><STRONG><a name="[130]"></a>bsec_k_Entity_parseAndDeserialize</STRONG> (Thumb, 48 bytes, Stack size 64 bytes, Entity.o(i.bsec_k_Entity_parseAndDeserialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bsec_k_Entity_parseAndDeserialize
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_Bsec_setHyperConfiguration
</UL>

<P><STRONG><a name="[133]"></a>bsec_l_Entity_parseAndDeserialize</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, Entity.o(i.bsec_l_Entity_parseAndDeserialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bsec_l_Entity_parseAndDeserialize
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_Bsec_setHyperConfiguration
</UL>

<P><STRONG><a name="[ff]"></a>bsec_m_Entity_parseAndDeserialize</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, Entity.o(i.bsec_m_Entity_parseAndDeserialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bsec_m_Entity_parseAndDeserialize
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_configure
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_configure
</UL>

<P><STRONG><a name="[10f]"></a>bsec_n_Entity_parseAndDeserialize</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, Entity.o(i.bsec_n_Entity_parseAndDeserialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsec_n_Entity_parseAndDeserialize
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_configure
</UL>

<P><STRONG><a name="[110]"></a>bsec_o_Entity_parseAndDeserialize</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, Entity.o(i.bsec_o_Entity_parseAndDeserialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bsec_o_Entity_parseAndDeserialize
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorHeatCompensator_configure
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_configure
</UL>

<P><STRONG><a name="[12a]"></a>bsec_p_Entity_parseAndDeserialize</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, Entity.o(i.bsec_p_Entity_parseAndDeserialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsec_p_Entity_parseAndDeserialize
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorStatusTracker_configure
</UL>

<P><STRONG><a name="[fc]"></a>bsec_q_Entity_parseAndDeserialize</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, Entity.o(i.bsec_q_Entity_parseAndDeserialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsec_q_Entity_parseAndDeserialize
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_configure
</UL>

<P><STRONG><a name="[f9]"></a>bsec_r_Entity_parseAndDeserialize</STRONG> (Thumb, 52 bytes, Stack size 544 bytes, Entity.o(i.bsec_r_Entity_parseAndDeserialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = bsec_r_Entity_parseAndDeserialize
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_configure
</UL>

<P><STRONG><a name="[140]"></a>bsec_rem</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, rem.o(i.bsec_rem))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = bsec_rem &rArr; bsec_rt_remd &rArr; trunc &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_rt_remd
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_rt_roundd
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_sensor_control
</UL>

<P><STRONG><a name="[13f]"></a>bsec_rt_roundd</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, bsec_codegen_rtwutil.o(i.bsec_rt_roundd))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = bsec_rt_roundd &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_rem
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_update_subscription
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_sensor_control
</UL>

<P><STRONG><a name="[fa]"></a>bsec_s_Entity_parseAndDeserialize</STRONG> (Thumb, 52 bytes, Stack size 424 bytes, Entity.o(i.bsec_s_Entity_parseAndDeserialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = bsec_s_Entity_parseAndDeserialize
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_configure
</UL>

<P><STRONG><a name="[152]"></a>bsec_sensor_control_m</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, bsec_interface_multi.o(i.bsec_sensor_control_m))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = bsec_sensor_control_m &rArr; bsec_codegen_sensor_control &rArr; bsec_Bsec_applyUpdateSubscription &rArr; bsec_ChannelHub_updateChannelInterfaceDependency &rArr; bsec_GasHumidityPreProcessor_updateInterfaceDependency &rArr; bsec_ExpSmoothing_setCoeffFromBandwidth &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_sensor_control
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_iot_loop
</UL>

<P><STRONG><a name="[14f]"></a>bsec_set_configuration_m</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, bsec_interface_multi.o(i.bsec_set_configuration_m))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = bsec_set_configuration_m &rArr; bsec_codegen_set_configuration &rArr; bsec_ChannelHub_configureChannel &rArr; bsec_GasEstimator_configure &rArr; bsec_r_Entity_parseAndDeserialize
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_set_configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_iot_init
</UL>

<P><STRONG><a name="[150]"></a>bsec_set_state_m</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, bsec_interface_multi.o(i.bsec_set_state_m))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = bsec_set_state_m &rArr; bsec_codegen_set_state &rArr; bsec_ChannelHub_setChannelState &rArr; bsec_GasEstimator_setState &rArr; bsec_h_Entity_parseAndDeserialize
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_iot_init
</UL>

<P><STRONG><a name="[fb]"></a>bsec_t_Entity_parseAndDeserialize</STRONG> (Thumb, 48 bytes, Stack size 176 bytes, Entity.o(i.bsec_t_Entity_parseAndDeserialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = bsec_t_Entity_parseAndDeserialize
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_configure
</UL>

<P><STRONG><a name="[fd]"></a>bsec_u_Entity_parseAndDeserialize</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, Entity.o(i.bsec_u_Entity_parseAndDeserialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bsec_u_Entity_parseAndDeserialize
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_configure
</UL>

<P><STRONG><a name="[94]"></a>bsec_update_subscription_m</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, bsec_interface_multi.o(i.bsec_update_subscription_m))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = bsec_update_subscription_m &rArr; bsec_codegen_update_subscription &rArr; bsec_rt_roundd &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_update_subscription
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_bsec_update_subscription
</UL>

<P><STRONG><a name="[1f]"></a>bus_read</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, main.o(i.bus_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = bus_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[1e]"></a>bus_write</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, main.o(i.bus_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = bus_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[15f]"></a>ceil</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, ceil.o(i.ceil))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ceil &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_rt_roundd
</UL>

<P><STRONG><a name="[21]"></a>config_load</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i.config_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = config_load
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[166]"></a>debug_print</STRONG> (Thumb, 62 bytes, Stack size 536 bytes, main.o(i.debug_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = debug_print &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout &rArr; UART_EndRxTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_ready
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[192]"></a>__mathlib_expf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, expf.o(i.expf), UNUSED)

<P><STRONG><a name="[f5]"></a>expf</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, expf.o(i.expf))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = expf &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_vocFeatureTempHumComp
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_isBaselineAllowedAdapt
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_filterRobustMaxMin
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_GasEstimator_softmaxApply
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_GasEstimator_applyTransferFunction
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_softmaxApply
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_applyTransferFunction
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_convertHumidity
</UL>

<P><STRONG><a name="[15c]"></a>floor</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, floor.o(i.floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_rt_remd
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_rt_roundd
</UL>

<P><STRONG><a name="[11c]"></a>floorf</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, floorf.o(i.floorf))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = floorf &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_updateInterfaceDependency
</UL>

<P><STRONG><a name="[f4]"></a>fmaxf</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, fmaxf.o(i.fmaxf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fmaxf
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fcmp4
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_vocFeatureTempHumComp
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_isBaselineAllowedAdapt
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_getMinimumFilterDistance
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_filterRobustMaxMin
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_GasEstimator_applyTransferFunction
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_denormalization
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_applyTransferFunction
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_doStep
</UL>

<P><STRONG><a name="[116]"></a>fminf</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, fminf.o(i.fminf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fminf
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fcmp4
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_vocFeatureTempHumComp
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_getMinimumFilterDistance
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_doStep
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_updateInterfaceDependency
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_doStep
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_convertHumidity
</UL>

<P><STRONG><a name="[15e]"></a>fmod</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, fmod.o(i.fmod))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = fmod &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drem
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_rt_remd
</UL>

<P><STRONG><a name="[1c]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[156]"></a>getData</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, bsec_integration.o(i.getData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getData
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_iot_loop
</UL>

<P><STRONG><a name="[16c]"></a>getMeasDur</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bsec_integration.o(i.getMeasDur))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = getMeasDur &rArr; bme68x_get_meas_dur &rArr; boundary_check
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_get_meas_dur
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBme68xConfigParallel
</UL>

<P><STRONG><a name="[25]"></a>get_timestamp_us</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, main.o(i.get_timestamp_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_timestamp_us &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[11b]"></a>log10f</STRONG> (Thumb, 368 bytes, Stack size 24 bytes, log10f.o(i.log10f))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = log10f &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_vocFeatureTempHumComp
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_updateInterfaceDependency
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityPreProcessor_doStep
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_updateInterfaceDependency
</UL>

<P><STRONG><a name="[193]"></a>__mathlib_logf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, logf.o(i.logf), UNUSED)

<P><STRONG><a name="[10b]"></a>logf</STRONG> (Thumb, 338 bytes, Stack size 24 bytes, logf.o(i.logf))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = logf &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_preprocessInput
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_convertHumidity
</UL>

<P><STRONG><a name="[19]"></a>main</STRONG> (Thumb, 220 bytes, Stack size 192 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 7304<LI>Call Chain = main &rArr; bsec_iot_init &rArr; bsec_set_configuration_m &rArr; bsec_codegen_set_configuration &rArr; bsec_ChannelHub_configureChannel &rArr; bsec_GasEstimator_configure &rArr; bsec_r_Entity_parseAndDeserialize
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_iot_loop
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_iot_init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_get_version_m
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocateMemory
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[24]"></a>output_ready</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, main.o(i.output_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = output_ready &rArr; debug_print &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout &rArr; UART_EndRxTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_print
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[194]"></a>__mathlib_powf</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, powf.o(i.powf), UNUSED)

<P><STRONG><a name="[126]"></a>powf</STRONG> (Thumb, 1538 bytes, Stack size 64 bytes, powf.o(i.powf))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = powf &rArr; __mathlib_flt_infnan2 &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix_r
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_divzero
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_IaqEstimator_doStep
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_sensor_control
</UL>

<P><STRONG><a name="[157]"></a>processData</STRONG> (Thumb, 228 bytes, Stack size 184 bytes, bsec_integration.o(i.processData))
<BR><BR>[Stack]<UL><LI>Max Depth = 1492<LI>Call Chain = processData &rArr; bme68x_bsec_process_data &rArr; bsec_do_steps_m &rArr; bsec_codegen_do_steps &rArr; bsec_ChannelHub_do &rArr; bsec_GasEstimator_doStep &rArr; bsec_GasEstimator_estimateGas &rArr; bsec_GasEstimator_applyTransferFunction &rArr; bsec_GasEstimator_softmaxApply &rArr; expf &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_bsec_process_data
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_iot_loop
</UL>

<P><STRONG><a name="[e9]"></a>roundf</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, roundf.o(i.roundf))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = roundf &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_doStep
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_ChannelHub_setOutput
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_setOutput
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_update_subscription
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_sensor_control
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_do_steps
</UL>

<P><STRONG><a name="[154]"></a>setBme68xConfigForced</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, bsec_integration.o(i.setBme68xConfigForced))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = setBme68xConfigForced &rArr; bme68x_set_heatr_conf &rArr; set_conf &rArr; bme68x_set_regs &rArr; set_mem_page
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_set_op_mode
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_set_heatr_conf
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_set_conf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_get_conf
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_iot_loop
</UL>

<P><STRONG><a name="[155]"></a>setBme68xConfigParallel</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, bsec_integration.o(i.setBme68xConfigParallel))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = setBme68xConfigParallel &rArr; bme68x_set_heatr_conf &rArr; set_conf &rArr; bme68x_set_regs &rArr; set_mem_page
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_set_op_mode
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_set_heatr_conf
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_set_conf
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_get_conf
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMeasDur
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_iot_loop
</UL>

<P><STRONG><a name="[f0]"></a>sinf</STRONG> (Thumb, 330 bytes, Stack size 32 bytes, sinf.o(i.sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ExpSmoothing_setCoeffFromBandwidth
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_updateInterfaceDependency
</UL>

<P><STRONG><a name="[20]"></a>sleep_n</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(i.sleep_n))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sleep_n &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[f1]"></a>sqrtf</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sqrtf.o(i.sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sqrtf &rArr; _fsqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsqrt
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ExpSmoothing_setCoeffFromBandwidth
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_HumidityTemperatureCorrector_updateInterfaceDependency
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_updateInterfaceDependency
</UL>

<P><STRONG><a name="[22]"></a>state_load</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.state_load))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[23]"></a>state_save</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.state_save))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[15a]"></a>trunc</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, trunc.o(i.trunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = trunc &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_rt_remd
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[73]"></a>I2C_Flush_TXDR</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l0xx_hal_i2c.o(i.I2C_Flush_TXDR))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
</UL>

<P><STRONG><a name="[72]"></a>I2C_IsErrorOccurred</STRONG> (Thumb, 266 bytes, Stack size 40 bytes, stm32l0xx_hal_i2c.o(i.I2C_IsErrorOccurred))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
</UL>

<P><STRONG><a name="[57]"></a>I2C_RequestMemoryRead</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, stm32l0xx_hal_i2c.o(i.I2C_RequestMemoryRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[5b]"></a>I2C_RequestMemoryWrite</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, stm32l0xx_hal_i2c.o(i.I2C_RequestMemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[58]"></a>I2C_TransferConfig</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32l0xx_hal_i2c.o(i.I2C_TransferConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[56]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, stm32l0xx_hal_i2c.o(i.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[59]"></a>I2C_WaitOnSTOPFlagUntilTimeout</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32l0xx_hal_i2c.o(i.I2C_WaitOnSTOPFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[5c]"></a>I2C_WaitOnTXISFlagUntilTimeout</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32l0xx_hal_i2c.o(i.I2C_WaitOnTXISFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[65]"></a>__NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32l0xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[7e]"></a>UART_EndRxTransfer</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[90]"></a>bme68x_bsec_process_data</STRONG> (Thumb, 294 bytes, Stack size 504 bytes, bsec_integration.o(i.bme68x_bsec_process_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 1308<LI>Call Chain = bme68x_bsec_process_data &rArr; bsec_do_steps_m &rArr; bsec_codegen_do_steps &rArr; bsec_ChannelHub_do &rArr; bsec_GasEstimator_doStep &rArr; bsec_GasEstimator_estimateGas &rArr; bsec_GasEstimator_applyTransferFunction &rArr; bsec_GasEstimator_softmaxApply &rArr; expf &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_do_steps_m
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processData
</UL>

<P><STRONG><a name="[93]"></a>bme68x_bsec_update_subscription</STRONG> (Thumb, 90 bytes, Stack size 152 bytes, bsec_integration.o(i.bme68x_bsec_update_subscription))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = bme68x_bsec_update_subscription &rArr; bsec_update_subscription_m &rArr; bsec_codegen_update_subscription &rArr; bsec_rt_roundd &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_update_subscription_m
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_iot_init
</UL>

<P><STRONG><a name="[9e]"></a>boundary_check</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bme68x.o(i.boundary_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = boundary_check
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_set_conf
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_get_meas_dur
</UL>

<P><STRONG><a name="[160]"></a>calc_gas_resistance_high</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, bme68x.o(i.calc_gas_resistance_high))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = calc_gas_resistance_high &rArr; __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_field_data
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_all_field_data
</UL>

<P><STRONG><a name="[161]"></a>calc_gas_resistance_low</STRONG> (Thumb, 174 bytes, Stack size 160 bytes, bme68x.o(i.calc_gas_resistance_low))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = calc_gas_resistance_low &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_field_data
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_all_field_data
</UL>

<P><STRONG><a name="[171]"></a>calc_gas_wait</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bme68x.o(i.calc_gas_wait))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_conf
</UL>

<P><STRONG><a name="[162]"></a>calc_humidity</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, bme68x.o(i.calc_humidity))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = calc_humidity &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_field_data
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_all_field_data
</UL>

<P><STRONG><a name="[163]"></a>calc_pressure</STRONG> (Thumb, 430 bytes, Stack size 56 bytes, bme68x.o(i.calc_pressure))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = calc_pressure &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_field_data
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_all_field_data
</UL>

<P><STRONG><a name="[164]"></a>calc_res_heat</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, bme68x.o(i.calc_res_heat))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = calc_res_heat &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_conf
</UL>

<P><STRONG><a name="[165]"></a>calc_temperature</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, bme68x.o(i.calc_temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = calc_temperature &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_field_data
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_all_field_data
</UL>

<P><STRONG><a name="[a3]"></a>get_calib_data</STRONG> (Thumb, 276 bytes, Stack size 56 bytes, bme68x.o(i.get_calib_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = get_calib_data &rArr; bme68x_get_regs &rArr; set_mem_page
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_init
</UL>

<P><STRONG><a name="[a9]"></a>get_mem_page</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, bme68x.o(i.get_mem_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_mem_page
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_soft_reset
</UL>

<P><STRONG><a name="[98]"></a>null_ptr_check</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bme68x.o(i.null_ptr_check))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_soft_reset
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_set_regs
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_get_regs
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mem_page
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mem_page
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boundary_check
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_get_data
</UL>

<P><STRONG><a name="[9a]"></a>read_all_field_data</STRONG> (Thumb, 406 bytes, Stack size 176 bytes, bme68x.o(i.read_all_field_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = read_all_field_data &rArr; calc_gas_resistance_low &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_get_regs
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_temperature
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_pressure
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_humidity
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_gas_resistance_low
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_gas_resistance_high
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_get_data
</UL>

<P><STRONG><a name="[99]"></a>read_field_data</STRONG> (Thumb, 386 bytes, Stack size 80 bytes, bme68x.o(i.read_field_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = read_field_data &rArr; calc_gas_resistance_low &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_get_regs
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_temperature
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_pressure
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_humidity
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_gas_resistance_low
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_gas_resistance_high
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_get_data
</UL>

<P><STRONG><a name="[a8]"></a>set_conf</STRONG> (Thumb, 370 bytes, Stack size 96 bytes, bme68x.o(i.set_conf))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = set_conf &rArr; bme68x_set_regs &rArr; set_mem_page
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_set_regs
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_res_heat
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_gas_wait
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_set_heatr_conf
</UL>

<P><STRONG><a name="[a0]"></a>set_mem_page</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, bme68x.o(i.set_mem_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = set_mem_page
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_set_regs
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_get_regs
</UL>

<P><STRONG><a name="[9b]"></a>swap_fields</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bme68x.o(i.swap_fields))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = swap_fields
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme68x_get_data
</UL>

<P><STRONG><a name="[143]"></a>rem_uint16_t</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsec_codegen_sensor_control.o(i.rem_uint16_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rem_uint16_t &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_codegen_sensor_control
</UL>

<P><STRONG><a name="[ba]"></a>bsec_convert_to_enum_OutputIdentifier</STRONG> (Thumb, 166 bytes, Stack size 4 bytes, Bsec.o(i.bsec_convert_to_enum_OutputIdentifier))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bsec_convert_to_enum_OutputIdentifier &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_setHyperConfiguration
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_Bsec_setHyperConfiguration
</UL>

<P><STRONG><a name="[b0]"></a>rem_uint16_t</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, Bsec.o(i.rem_uint16_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rem_uint16_t &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_checkSamplIntvlCompatibility
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_Bsec_checkIfSensorRequired
</UL>

<P><STRONG><a name="[ce]"></a>bsec_ChannelHub_isChannelReady</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, ChannelHub.o(i.bsec_ChannelHub_isChannelReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = bsec_ChannelHub_isChannelReady &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_do
</UL>

<P><STRONG><a name="[d0]"></a>bsec_ChannelHub_setOutput</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, ChannelHub.o(i.bsec_ChannelHub_setOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = bsec_ChannelHub_setOutput &rArr; roundf &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roundf
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_do
</UL>

<P><STRONG><a name="[d3]"></a>bsec_b_ChannelHub_setOutput</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ChannelHub.o(i.bsec_b_ChannelHub_setOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = bsec_b_ChannelHub_setOutput &rArr; roundf &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roundf
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_do
</UL>

<P><STRONG><a name="[d8]"></a>bsec_c_ChannelHub_setOutput</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, ChannelHub.o(i.bsec_c_ChannelHub_setOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bsec_c_ChannelHub_setOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_ChannelHub_do
</UL>

<P><STRONG><a name="[159]"></a>bsec_rt_remd</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, rem.o(i.bsec_rt_remd))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = bsec_rt_remd &rArr; trunc &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trunc
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmod
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_rem
</UL>

<P><STRONG><a name="[f3]"></a>bsec_GasEstimator_applyTransferFunction</STRONG> (Thumb, 162 bytes, Stack size 64 bytes, GasEstimator.o(i.bsec_GasEstimator_applyTransferFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = bsec_GasEstimator_applyTransferFunction &rArr; bsec_GasEstimator_softmaxApply &rArr; expf &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_softmaxApply
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmaxf
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_estimateGas
</UL>

<P><STRONG><a name="[100]"></a>bsec_GasEstimator_denormalization</STRONG> (Thumb, 484 bytes, Stack size 32 bytes, GasEstimator.o(i.bsec_GasEstimator_denormalization))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = bsec_GasEstimator_denormalization &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmaxf
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_doStep
</UL>

<P><STRONG><a name="[104]"></a>bsec_GasEstimator_estimateGas</STRONG> (Thumb, 356 bytes, Stack size 208 bytes, GasEstimator.o(i.bsec_GasEstimator_estimateGas))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = bsec_GasEstimator_estimateGas &rArr; bsec_GasEstimator_applyTransferFunction &rArr; bsec_GasEstimator_softmaxApply &rArr; expf &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_c_GasEstimator_matMultVec
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_GasEstimator_applyTransferFunction
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_applyTransferFunction
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_doStep
</UL>

<P><STRONG><a name="[103]"></a>bsec_GasEstimator_preprocessInput</STRONG> (Thumb, 318 bytes, Stack size 120 bytes, GasEstimator.o(i.bsec_GasEstimator_preprocessInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = bsec_GasEstimator_preprocessInput &rArr; logf &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_getSensorRange
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logf
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_doStep
</UL>

<P><STRONG><a name="[f2]"></a>bsec_GasEstimator_resetGasEstimator</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, GasEstimator.o(i.bsec_GasEstimator_resetGasEstimator))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsec_GasEstimator_resetGasEstimator
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_doStep
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_GasEstimator
</UL>

<P><STRONG><a name="[f6]"></a>bsec_GasEstimator_softmaxApply</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, GasEstimator.o(i.bsec_GasEstimator_softmaxApply))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = bsec_GasEstimator_softmaxApply &rArr; expf &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_applyTransferFunction
</UL>

<P><STRONG><a name="[106]"></a>bsec_b_GasEstimator_applyTransferFunction</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, GasEstimator.o(i.bsec_b_GasEstimator_applyTransferFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = bsec_b_GasEstimator_applyTransferFunction &rArr; bsec_b_GasEstimator_softmaxApply &rArr; expf &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_GasEstimator_softmaxApply
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmaxf
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_estimateGas
</UL>

<P><STRONG><a name="[134]"></a>bsec_b_GasEstimator_softmaxApply</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, GasEstimator.o(i.bsec_b_GasEstimator_softmaxApply))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = bsec_b_GasEstimator_softmaxApply &rArr; expf &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_b_GasEstimator_applyTransferFunction
</UL>

<P><STRONG><a name="[105]"></a>bsec_c_GasEstimator_matMultVec</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, GasEstimator.o(i.bsec_c_GasEstimator_matMultVec))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = bsec_c_GasEstimator_matMultVec &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasEstimator_estimateGas
</UL>

<P><STRONG><a name="[111]"></a>bsec_GasHumidityBaselineTracker_determineAccuracyLevel</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, GasHumidityBaselineTracker.o(i.bsec_GasHumidityBaselineTracker_determineAccuracyLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = bsec_GasHumidityBaselineTracker_determineAccuracyLevel &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_doStep
</UL>

<P><STRONG><a name="[114]"></a>bsec_GasHumidityBaselineTracker_filterRobustMaxMin</STRONG> (Thumb, 372 bytes, Stack size 56 bytes, GasHumidityBaselineTracker.o(i.bsec_GasHumidityBaselineTracker_filterRobustMaxMin))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = bsec_GasHumidityBaselineTracker_filterRobustMaxMin &rArr; expf &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmaxf
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_doStep
</UL>

<P><STRONG><a name="[11d]"></a>bsec_GasHumidityBaselineTracker_getFitParam</STRONG> (Thumb, 154 bytes, Stack size 20 bytes, GasHumidityBaselineTracker.o(i.bsec_GasHumidityBaselineTracker_getFitParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bsec_GasHumidityBaselineTracker_getFitParam
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_vocFeatureTempHumComp
</UL>

<P><STRONG><a name="[115]"></a>bsec_GasHumidityBaselineTracker_getMinimumFilterDistance</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, GasHumidityBaselineTracker.o(i.bsec_GasHumidityBaselineTracker_getMinimumFilterDistance))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = bsec_GasHumidityBaselineTracker_getMinimumFilterDistance &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fminf
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmaxf
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_doStep
</UL>

<P><STRONG><a name="[113]"></a>bsec_GasHumidityBaselineTracker_isBaselineAllowedAdapt</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, GasHumidityBaselineTracker.o(i.bsec_GasHumidityBaselineTracker_isBaselineAllowedAdapt))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = bsec_GasHumidityBaselineTracker_isBaselineAllowedAdapt &rArr; expf &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmaxf
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_doStep
</UL>

<P><STRONG><a name="[112]"></a>bsec_GasHumidityBaselineTracker_vocFeatureTempHumComp</STRONG> (Thumb, 374 bytes, Stack size 88 bytes, GasHumidityBaselineTracker.o(i.bsec_GasHumidityBaselineTracker_vocFeatureTempHumComp))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = bsec_GasHumidityBaselineTracker_vocFeatureTempHumComp &rArr; log10f &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_getFitParam
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fminf
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmaxf
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10f
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expf
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_GasHumidityBaselineTracker_doStep
</UL>

<P><STRONG><a name="[12b]"></a>bsec_SensorStatusTracker_resetRunInState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, SensorStatusTracker.o(i.bsec_SensorStatusTracker_resetRunInState))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorStatusTracker_updateInterfaceDependency
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsec_SensorStatusTracker_doStep
</UL>

<P><STRONG><a name="[8c]"></a>_fp_digits</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[80]"></a>_printf_core</STRONG> (Thumb, 1760 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[8f]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[8e]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1d]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[29]"></a>__arm_fini_</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_fini
</UL>
<HR></body></html>
